dnl -------------------------------------------------------------------------
dnl Autoconf startup.
dnl -------------------------------------------------------------------------

AC_PREREQ([2.63])
m4_define([GIT_VERSION_GEN], [dnl
pushdef([version], [m4_esyscmd([./git-version-gen])])dnl
ifelse([]version[], [], [0.2.0], []version[])[]dnl
popdef([version])dnl
])
AC_INIT([unsermarkt], [GIT_VERSION_GEN], [https://github.com/hroptatyr/unsermarkt])
AC_CONFIG_AUX_DIR([.])
AC_CONFIG_HEADER([src/config.h])
AC_CONFIG_MACRO_DIR([m4])
AC_CONFIG_SRCDIR([src/])

dnl -------------------------------------------------------------------------
dnl Local copyright notices.
dnl -------------------------------------------------------------------------

AC_COPYRIGHT(
[#### Configuration script for unsermarkt.
#### Copyright (C) 2008-2013 Sebastian Freundt

### Don't edit this script!
### This script was automatically generated by the `autoconf' program
### from the file `./configure.ac'.
### To rebuild it, execute the command
###     autoreconf
])

AM_INIT_AUTOMAKE([foreign dist-xz])
m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])

## initialise our cool message nest levels
SXE_INIT_MSG_LEVEL

## the build chain
AC_PROG_CC([icc gcc tcc cc])
SXE_CHECK_CC([c11 c1x c99 gnu99])
AC_CHECK_TOOLS([AR], [xiar ar], [false])
AC_C_BIGENDIAN
SXE_CHECK_CFLAGS

## some sizes we need
AC_CHECK_SIZEOF([long])
AC_CHECK_SIZEOF([int])

## check for byteorder utils
AC_CHECK_HEADERS([endian.h sys/endian.h byteorder.h byteswap.h])

## parser goodness
SXE_CHECK_PARSER_LEXER

AC_CHECK_HEADERS([stdbool.h])
AC_CHECK_HEADERS([fcntl.h])

## check for working c11 features
SXE_CHECK_ANON_STRUCTS_DECL
SXE_CHECK_ANON_STRUCTS_INIT

## network headers
AC_CHECK_HEADERS([sys/socket.h])
AC_CHECK_HEADERS([arpa/inet.h])
AC_CHECK_HEADERS([netinet/in.h])
AC_CHECK_HEADERS([netdb.h])
AC_CHECK_HEADERS([sys/un.h])
AC_CHECK_HEADERS([errno.h])
AC_CHECK_HEADERS([sys/utsname.h])

## memory
AC_CHECK_HEADERS([sys/mman.h])

## date time
SXE_CHECK_METRONOME

## event loop
AC_CHECK_LIBEV
AM_CONDITIONAL([HAVE_LIBEV], [test "${ax_cv_feat_libev}" = "yes"])

## check for lua
PKG_CHECK_MODULES([LUA], [lua >= 5.1.0], [:], [:])

## check for unserding
PKG_CHECK_MODULES([unserding], [unserding >= 0.3.0], [
	## check for unsermoddir variable
	PKG_CHECK_VAR_MSG([unserding], [unsermoddir], [whither unserding DSOs go])

	## check for unserincdir variable
	PKG_CHECK_VAR_MSG([unserding], [unserincdir], [whither unserding DSOs headers go])

	## construct our take on unser{mod,inc}dir
	unserincdir="${includedir}/unserding"
	unsermoddir="${libdir}/unserding"
])


## check for ute
PKG_CHECK_MODULES([uterus], [uterus >= 0.2.2], [have_uterus="yes"], [])
if test "${have_uterus}" = "yes"; then
	## check for the header
	SXE_DUMP_LIBS
	CPPFLAGS="${CPPFLAGS} ${uterus_CFLAGS}"
	LDFLAGS="${LDFLAGS} ${uterus_LIBS}"
	AC_CHECK_HEADERS([uterus.h uterus/uterus.h])
	AC_CHECK_LIB([uterus], [ute_free])

	if test "${ac_cv_lib_uterus_ute_free}" = "yes"; then
		AC_DEFINE([HAVE_UTE_FREE], [1], [if libuterus has ute_free()])
	fi
	SXE_RESTORE_LIBS
fi
AM_CONDITIONAL([HAVE_UTERUS], [test "${have_uterus}" = "yes"])

## check for sqlite3 libs
PKG_CHECK_MODULES([sqlite], [sqlite3 >= 3.7],
	[have_sqlite="yes"], [have_sqlite="no"])
AM_CONDITIONAL([HAVE_SQLITE], [test "${have_sqlite}" = "yes"])

## check for mxml
PKG_CHECK_MODULES([mxml], [mxml >= 2.7],
	[have_mxml="yes"], [have_mxml="no"])
if test "${have_mxml}" = "yes"; then
	## check for the header
	SXE_DUMP_LIBS
	CPPFLAGS="${CPPFLAGS} ${mxml_CFLAGS}"
	AC_CHECK_HEADERS([mxml.h])
	SXE_RESTORE_LIBS

	if test "${ac_cv_header_mxml_h}" != "yes"; then
		have_mxml="no"
	fi
fi
AM_CONDITIONAL([HAVE_MXML], [test "${have_mxml}" = "yes"])

## check for expat
PKG_CHECK_MODULES([expat], [expat >= 2.0], [have_expat="yes"], [have_expat="no"])
if test "${have_expat}" = "yes"; then
	## check for the header
	SXE_DUMP_LIBS
	CPPFLAGS="${CPPFLAGS} ${expat_CFLAGS}"
	AC_CHECK_HEADERS([expat.h])
	SXE_RESTORE_LIBS

	if test "${ac_cv_header_expat_h}" != "yes"; then
		have_expat="no"
	fi
fi
AM_CONDITIONAL([HAVE_EXPAT], [test "${have_expat}" = "yes"])

AC_PATH_PROG([GPERF], [gperf])
if test -z "${GPERF}"; then
	GPERF="gperf"
fi
AC_ARG_VAR([GPERF], [full path to the gperf tool])

## check for sqlite3 libs
PKG_CHECK_MODULES([sqlite], [sqlite3 >= 3.7],
	[have_sqlite="yes"], [have_sqlite="no"])
AM_CONDITIONAL([HAVE_SQLITE], [test "${have_sqlite}" = "yes"])

## check for libfixc
PKG_CHECK_MODULES([fixc], [libfixc], [have_fixc="yes"], [have_fixc="no"])
if test "${have_fixc}" = "yes"; then
	## check for the header
	SXE_DUMP_LIBS
	CPPFLAGS="${CPPFLAGS} ${fixc_CFLAGS}"
	AC_CHECK_HEADERS([libfixc/fix.h])
	SXE_RESTORE_LIBS

	if test "${ac_cv_header_libfixc_fix_h}" != "yes"; then
		have_fixc="no"
	fi
fi
AM_CONDITIONAL([HAVE_FIXC], [test "${have_fixc}" = "yes"])

## check for libtool
SXE_CHECK_LIBTOOL

AC_CONFIG_FILES([Makefile])
AC_CONFIG_FILES([src/Makefile])
AC_CONFIG_FILES([unsermarkt.pc])
AC_OUTPUT

dnl configure.ac ends here
