dnl -------------------------------------------------------------------------
dnl Autoconf startup.
dnl -------------------------------------------------------------------------

AC_PREREQ([2.63])
m4_define([GIT_VERSION_GEN], [dnl
pushdef([version], [m4_esyscmd([./git-version-gen])])dnl
ifelse([]version[], [], [0.0.0], []version[])[]dnl
popdef([version])dnl
])
AC_INIT([unsermarkt], [GIT_VERSION_GEN], [https://github.com/hroptatyr/unsermarkt])
AC_CONFIG_AUX_DIR([.])
AC_CONFIG_HEADER([src/config.h])
AC_CONFIG_MACRO_DIR([m4])
AC_CONFIG_SRCDIR([src/])

dnl -------------------------------------------------------------------------
dnl Local copyright notices.
dnl -------------------------------------------------------------------------

AC_COPYRIGHT(
[#### Configuration script for unserding.
#### Copyright (C) 2008-2012 Sebastian Freundt

### Don't edit this script!
### This script was automatically generated by the `autoconf' program
### from the file `./configure.ac'.
### To rebuild it, execute the command
###     autoreconf
])

AM_INIT_AUTOMAKE([foreign dist-xz])
m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])

## initialise our cool message nest levels
SXE_INIT_MSG_LEVEL

## the build chain
AC_PROG_CC([icc gcc tcc cc])
SXE_CHECK_CC([gnu11 c11 gnu1x c1x gnu99 c99])
AC_C_BIGENDIAN
SXE_CHECK_CFLAGS

## parser goodness
SXE_CHECK_PARSER_LEXER

## libtool goddess^Wgoodness
SXE_CHECK_LIBTOOL

AC_CHECK_HEADERS([stdbool.h])
AC_CHECK_HEADERS([fcntl.h])

## date time
SXE_CHECK_METRONOME

## event loop
SXE_CHECK_LIBEV

### Check Input stuff
with_inputs_file="yes"
with_inputs_term="yes"
with_inputs_unix="yes"
with_inputs_tcpudp="yes"
with_inputs_multicast="yes"

## now go check the socket goodness
SXE_CHECK_SOCKETS
SXE_CHECK_SUFFICIENCY([unix], [unix domain sockets])
SXE_CHECK_SUFFICIENCY([sockets], [tcp/udp sockets])
SXE_CHECK_SUFFICIENCY([multicast], [multicast])

## evaluate the results
if test "$with_inputs_file" = "yes"; then
	have_inputs_file="yes"
fi
if test "$with_inputs_term" = "yes"; then
	have_inputs_term="yes"
fi
if test "$with_inputs_unix" = "yes"; then
	if test "$have_unix" = "yes"; then
		have_inputs_unix="yes"
	else
		have_inputs_unix="no"
	fi
fi
if test "$with_inputs_tcpudp" = "yes"; then
	if test "$have_sockets" = "yes"; then
		have_inputs_tcpudp="yes"
	else
		have_inputs_tcpudp="no"
	fi
fi
if test "$with_inputs_multicast" = "yes"; then
	if test "$have_multicast" = "yes"; then
		have_inputs_multicast="yes"
	else
		have_inputs_multicast="no"
	fi
fi

## final checks
if test "$have_inputs_term" = "yes" -a "$with_ansi_colours" != "no"; then
	if test "$with_ansi_colours" != "no"; then
		dnl SXE_CHECK_CURSES
		have_ansi_colours="yes"
		AC_DEFINE([HAVE_ANSI_COLOURS], [1], [Description here!])
	fi
	AC_DEFINE([WITH_INPUT_TERM], [1],
		[Whether to support traditional terminal input])
fi
AM_CONDITIONAL([WITH_INPUT_TERM],
	[test "$have_inputs_term" = "yes" -a "$with_inputs_term" = "yes"])
if test "$have_inputs_file" = "yes"; then
	AC_DEFINE([WITH_INPUT_FILE], [1],
		[Whether to support files as input source])
fi
AM_CONDITIONAL([WITH_INPUT_FILE],
	[test "$have_inputs_file" = "yes" -a "$with_inputs_file" = "yes"])
if test "$have_inputs_unix" = "yes"; then
	AC_DEFINE([WITH_INPUT_UNIX], [1],
		[Whether to support reading input from unix domain sockets])
fi
AM_CONDITIONAL([WITH_INPUT_UNIX],
	[test "$have_inputs_unix" = "yes" -a "$with_inputs_unix" = "yes"])
if test "$have_inputs_tcpudp" = "yes"; then
	AC_DEFINE([WITH_INPUT_TCPUDP], [1],
		[Whether to support reading input from TCP/UDP sockets])
fi
AM_CONDITIONAL([WITH_INPUT_TCPUDP],
	[test "$have_inputs_tcpudp" = "yes" -a "$with_inputs_tcpudp" = "yes"])
if test "$have_inputs_multicast" = "yes"; then
	AC_DEFINE([WITH_INPUT_MULTICAST], [1],
		[Whether to support reading input from multicast streams])
fi
AM_CONDITIONAL([WITH_INPUT_MULTICAST],
	[test "$have_inputs_multicast" = "yes" -a "$with_inputs_multicast" = "yes"])

## check if we've got libconfig
dnl PKG_CHECK_MODULES([LIBCONFIG], [libconfig])
## check for lua instead!

## check for unserding
PKG_CHECK_MODULES([unserding], [unserding >= 0.2.2])

## check for ute
PKG_CHECK_MODULES([uterus], [libuterus >= 0.2.1],
	[have_uterus="yes"], [have_uterus="no"])
if test "${have_uterus}"; then
	## check for the header
	SXE_DUMP_LIBS
	CPPFLAGS="${CPPFLAGS} ${uterus_CFLAGS}"
	AC_CHECK_HEADERS([uterus.h])
	SXE_RESTORE_LIBS
fi
AM_CONDITIONAL([HAVE_UTERUS], [test "${have_uterus}" = "yes"])

AC_CONFIG_FILES([Makefile])
AC_CONFIG_FILES([src/Makefile])
AC_OUTPUT

dnl configure.ac ends here
